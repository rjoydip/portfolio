---
import type { MarkdownHeading } from "astro";
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import Layout from "./Layout.astro";

type Props = CollectionEntry<"blog">["data"] & {
	headings: MarkdownHeading[];
	minutesRead: number;
};

const { title, description, pubDate, updatedDate, headings, minutesRead } =
	Astro.props;
---

<Layout title={title} description={description}>
	<div class="relative" id="top">
		<div class="px-8">
			<article class="prose max-w-3xl m-auto pb8 slide-enter-content">
				<div class="mb-8">
					<h1 class="leading-none md:text-5xl font-bold mb-4">
						{title}
					</h1>
					<div class="flex items-center justify-between">
						{pubDate && <FormattedDate date={pubDate} />}
						{
							updatedDate && (
								<div>
									Last updated{" : "}
									<FormattedDate date={updatedDate} />
								</div>
							)
						}
						<div>{minutesRead}</div>
					</div>
				</div>

				<slot />

				<div
					class="fixed space-x-4 top-20 right-6 h-screen w-25% flex-col group hidden xl:flex heading-container"
				>
					<div
						class="i-ri-menu-2-fill w6 h6 self-end opacity-75 group-hover:opacity-100 ease-in-out duration-500"
					>
					</div>
					<ul
						class="flex space-x-6 flex-col text-left w-full opacity-0 group-hover:opacity-100 transition-all duration-500 ease-in-out z-90"
					>
						{
							headings.map((heading: MarkdownHeading) => (
								<li class="list-none">
									<a
										href={`#${heading.slug}`}
										class="text-sm dark:hover:color-#fff opacity-70 hover:opacity-100 transition-all duration-500 ease-in-out"
									>
										{heading.text}
									</a>
								</li>
							))
						}
					</ul>
				</div>
			</article>
		</div>
	</div>
	<a
		href="#top"
		id="back-to-top"
		class="fixed bottom-4 right-4 m-4 i-solar-alt-arrow-up-bold w6 h6 i-solar-arrow-up-outline"
	>
	</a>
</Layout>

<style is:global>
	code::before,
	code::after {
		content: none !important;
	}

	.prose :where(strong) {
		color: var(--fg-deep);
		font-weight: 600;
	}

	.prose :where(p > code) {
		color: var(--c-scrollbar-hover) !important;
		background-color: var(--bg-code) !important;
		font-size: 0.875em;
		padding: 0.2em 0.3em;
		border-radius: 0.25rem;
	}

	.prose :where(a):not(:where(.navigation *)):not(:where(.heading-container *)) {
		color: var(--c-scrollbar-hover) !important;
		background-color: var(--bg-code) !important;
		border-radius: 0.25rem !important;
		padding: 0.2em 0.3em !important;
		text-decoration: none !important;
	}

	.prose :where(a):not(:where(.navigation *)):not(:where(.heading-container *)):hover {
		border-bottom: 1px solid var(--c-scrollbar) !important;
		border-radius: 0.25rem 0.25rem 0 0 !important;
	}

	.heading-container a {
		text-decoration: none;
	}

	.prose :where(figure, figcaption) {
		color: var(--c-scrollbar);
		margin-top: 1em !important;
		margin-bottom: 1em !import;
	}
</style>
